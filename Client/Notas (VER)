Proyecto creado con Vite.js

**_ Dependencias importantes _** {
-> Typescript
-> Axios
-> react-router-dom
-> redux
-> redux-devtools-extension (quizas)
-> react-redux
-> redux-thunk
-> react-query
-> font awesome
}

**_ Carpetas _**

Las siguientes carpetas, se pueden encontrar a nivel general, es decir, dentro del SRC/
Dentro de estas carpetas tendran codigos que se podran utilizar a nivel general en nuestra aplicacion.

> Models / Interfaces: Representa las "entidades" dentro de nuestra aplicacion. Con TypeScript, tendremos aqui todas nuestras interfaces

> Components: Elementos JSX que se re utilizan en otras pages.

> Adapters: Aqui adaptaremos los datos que recibimos de los end-points para que los use nuestro Front-End.
> Es decir, indicaremos los nombres con lo que estaran presente en nuestro proyecto y pudiendo separar (o agregarle una capa de abstraccion) el nombre de los datos que nos pasa el back, con lo que utilizamos en el front.

PD: Esto es para evitar que se rompa toda nuestra aplicacion cuando en el B.E se cambien los nombres de los attr. De esta manera, solamente afectara en los "Adapters" y no en todo el proyecto en si.

PD: Se utliza dentro de "Services" a la hora de cuando se ejecuta un end-point y nos revuelve un valor.
Tb utlizara los "Models" que tendran un modelo de datos que utilizaremos en el front y otro modelo de lo que nos devolvera el end-point.

> Assets: Todo lo relacionado a imagenes, videos, musica.

> Hooks: Aqui colocaremos todos nuestros Customs hooks.

> Interceptors: Aqui pondremos las funciones que interceptan las llamadas y respuestas HTTP

> Redux: Aqui manejaremos todos los estados.

> Utils: Funciones con cierta logica que nos ayudan a hacer una tarea en especifico y se pueden re utilizar en cualquier parte del proyecto.
> PD: A lo archivos es bueno que finalicen con el .utility.tsx

> Context:

De las carpetas mencionadas anteriormente, las siguientes, se pueden modularizar, es decir:
Utilziar esa carpeta para una situacion en especifico (o vista en espeficia) y tendran codigo que solamente se utilizan en esa vista puntual.
Como por ejem.: Un Login; Register; Home; etc. - Adapters - Components - Hooks - Interceptors - Models - Services - Context



------------- <h3> useSearchParams()  - HACER </h3>

Nos permite pasar parametros dentro de la URL, esto es muy bueno para hora de buscar datos en especificos. Por ejem.: Pasar una URL especifica y que al acceder a esa url, nos muestre el perfil de cierto usuario.
Generalmente se utiliza para busqueda, filtrados, paginados y es muy bueno, porque no se pierde el dato al re cargar la pagina

Tb se podria hacer esto con un State, setState pero es mas efectivo hacerlo de esta manera.

const [searchParams, setSearchParams] = useSearchParams();

const filter: string = searchParams.get("filter") ?? "";

const handleFilter = (e: any) => {
    setSearchParams({
        filter: e.target.value
    });
};

<input
    value={filter}
    type="text"
    placeholder="Filter"
    onChange={handleFilter}
/>

{projectos
  .filter((projec) => {
    if (!filter) return true;
    return projec
      .toLowerCase()
      .includes(filter.toLowerCase());
  })
  .map((project) => (
    <ol key={project}>
      <Link to={`detalle/${project}`}>{project}</Link>
    </ol>
  ))}
