Aclaracion
Debemos tener instalado TypeScript de manera global para poder iniciar un proyecto con TypeScript
PD: Si surge un error, posiblemente ver este articulo: https://www.cdmon.com/es/blog/la-ejecucion-de-scripts-esta-deshabilitada-en-este-sistema-te-contamos-como-actuar

Pasos:
1) Al empezar el proyecto con "npm init", debemos indicarle a Node que tenemos un proyecto con TypeScript escribiendo: "tsc -init"

2) Crearemos una carpeta llamada "dist" y otra llamada "src", seguido de esto, nos dirigimos
   al archivo "tsconfig.json" para especificar que cuando querramos compilar todo el proyecto BE
   se nos almacene en la carpeta "dist" que creamos recientemente.
   Para esto, agregaremos dentro de "compilerOptions" la sig linea:
    "outDir": "./dist", /* Specify an output folder for all emitted files. */

3) Librerias a utilizar: 
   * express
   * cors -> Conexiones de los cors BE y FE
   * dotenv -> Variable entorno
   * multer -> Permite el manejo de la carga de archivos multimedia
   * mongoose
   * nodemon
   * express-validator
   * mongoose-delete -> Este paquete nos permite indicarle a nuestros modelos (colecciones) que hagan uso de estrategias de "Soft Delete - borrado logico"
      Esta liberria, nos agrega nuevos metodos para realizar la consulta de eliminar y nos permite persistir los registros eliminados (por medio de otra propiedad que se incorpora de manera autoamtica) sin poder obtenerlos al querer hacer un getAll o getById.
      Nos define esa estrategia de neogico de no perder los registros eliminados. PD: Es opcional, tb podemos usar los metodos naturales
   * jsonwebtokens 
   * bcrypt -> Permite hashear las claves y guardalas en la BD
   * sequelize -> ORM de bd relacional
   * mySql2 -> Instalamos el proveedor de BD q nos permite utilizar sequelize (Instalamos este xq es el que particularmente utilizamos en este caso ya que sequelize puede utilizar diferentes proveedores)
   * mongoose-paginate-v2 -> Para paginar todos los registro de una coleccion de mongoose   
   * Config: Nos permite definir un conjunto de par치metros predeterminados y extenderlos para diferentes entornos de implementaci칩n (desarrollo, control de calidad, preparaci칩n, producci칩n, etc.).
   * node-config: Permite pasarle valores a nuestros parametros del "Config" por medio de las variables de entorno del .ENV 
   

4) Configuraciones del package.json:
   Dentro del package, debemos especificar unas cuantas cosas:
   - El archivo principal de nuestro proyecto: El cual sera el "app.ts"
   - Los scripts de ejecucion: Copiaremos el siguiente obj.json
     "scripts": {
         "dev": "nodemon --watch './**/*.ts' --exec ts-node app.ts",
         "start": "node ./dist/app.js",
         "build": "tsc -p ."
      },
      Nota: Especificamos los archivos que se ejecutara en cada entorno de ejecucion.















A FUTURO: 


NOTAS RECORDATORIAS:
* Dentro de la carpeta "storage", tendremos todos los archivos multimedia 


* Al hacer uso de una BD relacional, es recomendable instalar un programa llamado Laragon, nos servira para iniciar una BD relacional en nuesrta pc. Idem XAMMP o phpMyAdmin e instalar mysql
https://dev.mysql.com/downloads/file/?id=514518

